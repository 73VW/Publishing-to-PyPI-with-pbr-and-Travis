`‚öôÔ∏èAutomatize sua publica√ß√£o no PyPI com PBR e Travis`
==========================================================

Para a documenta√ß√£o completa:

V√° para `ReadTheDocs <https://publishing-to-pypi-with-pbr-and-travis.readthedocs.io>`_


`‚úîÔ∏èPasso 1: escreva o arquivo setup para seu projeto python`
**************************************************************

Se voc√™ quiser publicar seu projeto no PyPi, primeiro voc√™ deve fazer um arquivo setup.

Nesse tutorial, eu vou explicar o uso do PBR_ que simplifica o processo.

`Setup.py`
----------

Como voc√™ pode ver no arquivo `setup python`_ incluso neste reposit√≥rio, a sintaxe √© bem b√°sica.

.. code:: python

    """Exemplo de arquivo Setup."""

    from setuptools import setup


    setup(
        setup_requires=['pbr'],
        pbr=True
    )

üéâ Voc√™ define que deseja usar PBR_ e pronto! üéâ

`Setup.cfg`
-----------

Como voc√™ pode ver no arquivo `config setup`_ incluso neste reposit√≥rio, a sintaxe √© t√£o simples quanto a do √∫ltimo arquivo.

Vamos passar por cada se√ß√£o juntos.

Primeiro de tudo, a se√ß√£o de metadata:

.. code:: yaml

    # Tipo da distribui√ß√£o Python
    [bdist_wheel]
    universal=0

    [metadata]
    # Nome do app
    name = Publishing to PyPI with pbr and Travis
    # Quem fez o app?
    author = Ma√´l Pedretti
    # Eu realmente preciso explicar?
    author_email = mael.pedretti@he-arc.ch
    # Uma pequena descri√ß√£o do seu app
    summary = Publishing to Pypi with PBR and Travis.
    # Tipo de licen√ßa
    license = MIT
    # Que arquivo cont√©m a descri√ß√£o longa?
    description-file =
        README.rst
    # Onde posso acessar o projeto?
    home-page = https://github.com/73VW/Publishing-to-PyPI-with-pbr-and-Travis
    # Qual vers√£o do Python √© necess√°ria para rodar?
    python_requires = >=3.6
    # Como voc√™ classifica seu aplicativo? https://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifier =
        Development Status :: 4 - Beta
        Environment :: Other Environment
        Intended Audience :: Education
        Operating System :: MacOS :: MacOS X
        Operating System :: Microsoft :: Windows
        Operating System :: POSIX
        Programming Language :: Python :: 3 :: Only
        Programming Language :: Python :: 3.6
        Programming Language :: Python :: Implementation :: CPython
        Topic :: Education

    # Encontrar automaticamente o pacote root
    [options]
    packages = find:

    # Quais arquivos que n√£o s√£o c√≥digos-fonte voc√™ deseja fazer deploy?
    [files]
    data_files =
        some/example = some/example/*

    # Onde seu app inicia?
    [entry_points]
    console_scripts =
        automabot = your_package.__main__:main

üéâ Depois desses ajustes voc√™ est√° pronto para seguir! üéâ

`‚úîÔ∏èPasso 2: Habilitando Travis!`
********************************

Dois modos de habilitar Travis s√£o apresentados aqui. Um usando  `Travis CLI`_ e o outro sem ele.

`Usando travis CLI`
---------------------

Rode o comando :code:`travis login` e realize o login no Travis.

Agora voc√™ pode rodar :code:`travis init`.

Se voc√™ est√° usando um reposit√≥rio git, Travis vai detect√°-lo e perguntar se isso est√° correto.

Caso contr√°rio, ele ir√° dizer que pode detectar o reposit√≥rio.

Ap√≥s voc√™ enviar :code:`Enter`, Travis pergunta qual a linguagem principal. Nesse caso, digite :code:`Python`.

Agora um novo arquivo chamado :code:`.travis.yml` foi criado e est√° dispon√≠vel no seu reposit√≥rio. Agora Travis est√° habilitado neste reposit√≥rio.

Vamos passar por esse arquivo mais tarde.

`Manualmente`
----------------

- V√° para `pagina inicial Travis`_.
- Logue-se ou Registre-se.
- V√° para sua p√°gina de perfil e sincronize sua conta.
- Seus reposit√≥rios p√∫blicos do Github est√£o agora listados abaixo.
- Selecione o projeto que deseja.

`.travis.yml`
-----------------

Agora vamos escrever nosso arquivo de configura√ß√£o.

Como a documenta√ß√£o √© realmente bem feita, eu sugiro que voc√™ cheque ela primeiro, j√° que n√£o explicarei tudo. Voc√™ pode encontr√°-la aqui https://docs.travis-ci.com/user/getting-started/.

Entretanto, vou explicar as configura√ß√µes que geralmente uso.

.. code:: yaml

    # Realmente preciso explicar essa linha?
    language: python

    # Voc√™ pode usar cache para um build mais r√°pido
    cache: pip

    # Vers√£o do python. Voc√™ pode definir mais do que uma se voc√™ quiser fazer m√∫ltiplos testes
    python:
      - '3.6'

    # Seus script de instala√ß√£o ou sua lista de instala√ß√£o
    install: pip install rstcheck

    # Seu script de test ou sua lista de instala√ß√£o
    script: rstcheck --recursive .

    # Configura√ß√µes para notifica√ß√µes, Eu pessoalmente n√£o gosto de receber spams no e-mail
    notifications:
      email:
        on_failure: never
        on_pull_requests: never

    # A parte interessante!
    deploy:
      # Se voc√™ precisar fazer o deploy de arquivos que o Travis construiu use a pr√≥xima linha
      skip_cleanup: true
      # Nesse caso n√≥s queremos fazer deploy no pypi
      provider: pypi
      # Que distribui√ß√£o n√≥s queremos fazer deploy
      distributions: sdist bdist_wheel
      # Quando queremos fazer o deploy?
      on:
        # Nesse caso eu quero fazer deploy apenas quando a tag √© "presente"...
        tags: true
        # ... e quando a tag est√° no master e respeita a forma "v0.0.0"
        branch:
          - master
          - /v?(\d+\.)?(\d+\.)?(\*|\d+)$/
      # Seu nome de usu√°rio pypi
      user: 73VW
      # Sua senha pypi protegida pelo Travis se voc√™ tiver o Travis CLI instalado
      password:
        secure: cGJz+vETnxwWAZQvzveJKOyn3rWy3/tcVmJvTVuflrgKgwMRm+sfQZB3vo39LzDcDbMzlzxLO4SUsqDpCxlPPM1pCjqHeUkke76pXA3HGTqfSS5VBic979pBDBqzFe8SLxery0ND7uPAam2xtZQcMRjIzMZFS+ZBD3tD9pWFnFqQOaw6Mwnfj2dWuA7BeNEBEeG+EErAJTqWHlwodjLsDBBilrvYEMPha049JWSz9TE1SMUKWZszCpo2hda8edvcB7WrNWJCYO+Pmc56aUHGlqiyRUowec9ZQplhmD7HWriRvda4n+1WqUB8tdACqBSBo6t39dis/yiLDv/qZpi6cooxJBtlK184AZvCIfjiu8ua5JqJ/SBghzrwLf7b5VbWg/WOtS8NEB+TYhZhpmkYLPXnOoJLYbbrOYA/sz/QfwXke2NCTp7apZFAtU1lFN2gVWsmff7ysRWwwHW/iidCAcu9BXlwMt2x2dv5PqSSqN1QdwCQ+cGcewlIPInHwCpXwI4sJXPEHeax0J5c206Yf4PMkzgrUj1+UmpB2AKJkMF0+kGd+MOj9SXYbNE1Lc456CuvKUflVry12mVQCgqqL6lZQadQ+aNKy0LoK4o4CN6JTUMpIn6JIOapLc9hzOGZgVuFzZ5YAs6l8VraMzZuAzOEv79UB92B3Iq2Vxki8vo=
      # Use o seguinte se n√£o tiver Travis CLI
      password : ${PYPI_PASSWORD}

`Senha`
----------

Se voc√™ n√£o tiver `Travis CLI`_ instalado, use a segunda op√ß√£o que mencionei acima e fa√ßa o seguinte:

- Na sua p√°gina de perfil, encontre seu projeto e clique na pequena engrenagem ‚öôÔ∏è. Isso vai abrir as configura√ß√µes
- V√° para a se√ß√£o :code:`Environment Variables` e adicione uma nova vari√°vel
- Se voc√™ pegar o meu exemplo, o nome da v√°riavel vai ser  PYPI_PASSWORD e o valor vai ser sua senha

.. image:: ./docs/_static/Add_pypi_password.PNG
    :width: 100%
    :alt: Como adicionar sua senha ao Travis

Se voc√™ instalou `Travis CLI`_, fa√ßa o seguinte.

- Deixe em branco a se√ß√£o de senha, como abaixo.

.. code:: yaml

    user: 73VW
    # Sua senha Pypi
    password:

- Agora vamos encript√°-la! Simplesmente digite :code:`travis encrypt --add deploy.password` Travis vai perguntar sua senha, vai encript√°-la e colar no arquivo.

üéâ Agora voc√™ est√° pronto para seguir! üéâ

`‚úîÔ∏èE agora?!`
******************

Bem, vamos tentar subir tudo para o reposit√≥rio para checar se tudo est√° certo e se os testes passam!

V√° para `pagina inicial Travis`_ e verifique se tudo deu certo!

Como voc√™ se lembra, n√£o configuramos nenhuma tag no github ent√£o esse commit n√£o deve ser "deployado".

Travis tamb√©m vai te dizer o seguinte:

:code:`Skipping a deployment with the pypi provider because this is not a tagged commit`

`‚úîÔ∏èVamos colocar uma tag!`
****************************

Agora, crie uma tag. Isso √© f√°cil com o git. A documenta√ß√£o das Tags Git podem ser encontradas  `aqui <https://git-scm.com/book/en/v2/Git-Basics-Tagging>`_.

Note que com  :code:`git tag` a op√ß√£o :code:`-a` permite que voc√™ especifique a vers√£o e :code:`-m` a mensagem.

Ent√£o seu comando vai ser o seguinte:

:code:`git tag -a 0.0.1 -m "First pypi deployment"`

Agora voc√™ pode verificar se ela foi criada com o comando :code:`git tag`.
O resultado deve se parecer com o seguinte:

.. code:: bash

    $ git tag
    v0.0.1

Agora realize o push e verifique novamente, o Travis, pypi e seu pacote dever√£o ser deployados!

Obs: N√£o se esque√ßa de adicionar :code:`--tags` ao seu comando push ou eles v√£o ficar no seu reposit√≥rio local.

**‚úîÔ∏èDeployed!**

`‚ö†Ô∏èNotas Globais`
*****************

‚úîÔ∏è Seu projeto precisa ser p√∫blico para usar Travis. Caso contr√°rio, voc√™ ter√° que usar a vers√£o Travis pro.

‚úîÔ∏è Seu endere√ßo de e-mail precisa ser verificado no pypi para fazer o upload de um novo projeto. Caso contr√°rio o upload vai ser rejeitado.

‚úîÔ∏èSua vers√£o de tag  **PRECISA** estar no formato [DIGITO.DIGITO.DIGITO]. Cheque https://docs.openstack.org/pbr/3.1.0/semver.html for more infos.

.. Bibliografia:

.. _PBR: https://docs.openstack.org/pbr/latest/index.html

.. _`setup python`: ./setup.py
.. _`config setup`: ./setup.cfg
.. _`pagina inicial Travis`: https://travis-ci.org
.. _`Travis CLI`: https://github.com/travis-ci/travis.rb
