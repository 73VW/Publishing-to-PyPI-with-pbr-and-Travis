`‚öôÔ∏èAutomatisez votre publication vers PyPI avec PBR et Travis`
=========================================================

Pour la documentation compl√®te:

Allez sur `ReadTheDocs <https://automate-your-publishing-to-pypi-with-pbr-and-travis.rtfd.io>`_


`‚úîÔ∏è√âtape 1: √©crire le setup de votre projet Python`
***************************************************

Si vous voulez publier votre projet Python sur PyPi, vous devrez cr√©er un fichier de setup.

Dans ce tutoriel, je vous montrerai l‚Äôutilit√© de PBR_ qui devrait simplifier le processus.

`Setup.py`
----------

Comme vous le voyez dans le fichier `python setup`_ inclus dans le d√©p√¥t, la syntaxe est basique.

.. code:: python

    """Example de setup."""

    from setuptools import setup


    setup(
        setup_requires=['pbr'],
        pbr=True
    )

üéâ Vous sp√©cifiez simplement que vous utilisez PBR_ et c‚Äôest bon! üéâ

`Setup.cfg`
-----------

Comme vous pouvez le voir dans le fichier `config setup`_ inclus aussi dans le d√©p√¥t, la syntaxe n‚Äôest pas beaucoup plus compliqu√©e que pour l‚Äôautre fichier.

Allons voir chaque section ensemble.

Pour commencer, la section des m√©tadonn√©es: 

.. code:: yaml

    # Type de distribution Python
    [bdist_wheel]
    universal=0

    [metadata]
    # Nom de l‚Äòapplication
    name = Publishing to PyPI with pbr and Travis
    # Qui l‚Äòa fait? 
    author = Ma√´l Pedretti
    # Ai-je vraiment besoin d‚Äôexpliquer ce qui vient?
    author_email = mael.pedretti@he-arc.ch
    # Une description courte de votre application
    summary = Publishing to Pypi with PBR and Travis.
    # Type de License
    license = MIT
    # Quel fichier contient la vraie description?
    description-file =
        README.rst
    # Page d‚Äôacc√®s au projet
    home-page = https://github.com/73VW/Publishing-to-PyPI-with-pbr-and-Travis
    # Quelle version de Python a t‚Äôelle besoin pour fonctionner?
    python_requires = >=3.6
    # Comment classifieriez-vous votre application? https://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifier =
        Development Status :: 4 - Beta
        Environment :: Other Environment
        Intended Audience :: Education
        Operating System :: MacOS :: MacOS X
        Operating System :: Microsoft :: Windows
        Operating System :: POSIX
        Programming Language :: Python :: 3 :: Only
        Programming Language :: Python :: 3.6
        Programming Language :: Python :: Implementation :: CPython
        Topic :: Education

    # Trouver le paquet root automatiquement
    [options]
    packages = find:

    # Quels fichiers qui ne sont pas du code source voulez-vous d√©ployer?
    [files]
    data_files =
        some/example = some/example/*

    # Quel fichier est le point d'entr√©e de votre application?
    [entry_points]
    console_scripts =
        automabot = your_package.__main__:main

üéâ Apr√®s quelques ajustement vous serez pr√™t! üéâ

`‚úîÔ∏è√âtape 2: Activer Travis!`
****************************

Il existe deux moyens d'activer Travis. Un en utilisant `Travis CLI`_ et sans.

`En utilisant Travis CLI`
-------------------

Lancez :code:`travis login` et connectez-vous √† Travis.

Maintenant vous pouvez lancer :code:`travis init`.

Si vous √™tes dans un d√©p√¥t GitHub, Travis le d√©tectera automatiquement et vous demandera si c'est le cas.

Sinon, il vous dira qu'il ne peut pas d√©tecter de d√©p√¥t.

Une fois que vous appuyez sur :code:`Enter`, Travis vous demandera votre langage principal. Dans notre cas, tapez :code:`Python`.

Maintenant un nouveau fichier appel√© :code:`.travis.yml` a √©t√© cr√©√© et est disponible dans votre d√©p√¥t. Travis est maintenant activ√© pour ce d√©p√¥t.

Nous irons voir ce fichier apr√®s.

`Manuellement`
----------

- Allez sur la `Page d'accueil`_.
- Connectez-vous ou cr√©ez un compte.
- Allez sur votre profil et connectez-vous avec votre compte GitHub.
- Vos d√©p√¥ts GitHub public sont maintenant list√©s au-dessus.
- Allez sur le projet que vous voulez.

`.travis.yml`
-------------

Maintenant allons √©crire notre fichier de r√©glages.

Comme la documentation est vraiment bien faite, je sugg√©rerai d'aller d'abord y jeter un coup d'≈ìil  comme je ne vais pas tout expliquer. Vous pouvez la trouver ici : https://docs.travis-ci.com/user/getting-started/.

Je vais en revanche vous montrer les r√©glages que j'utilise couramment:

.. code:: yaml

    # J'ai vraiment besoin d'expliquer cette ligne?
    language: python

    # Vous pouvez utiliser un cacher pour compiler plus rapidement
    cache: pip

    # la version de python. Vous pouvez en d√©finir plusieurs si vous voulez faire plusieurs tests.
    python:
      - '3.6'

    # votre script d'installation ou votre liste d'installation
    install: pip install rstcheck

    # votre script de tests ou votre liste d'installation
    script: rstcheck --recursive .

    # les r√©glages pour les notifications, je pr√©f√®re personnellement ne pas √™tre spammer de mails.
    notifications:
      email:
        on_failure: never
        on_pull_requests: never

    # la partie int√©ressante
    deploy:
      # Si vous avez besoin de d√©ployer un fichier que Travis a compil√©, utilisez la prochaine ligne
      skip_cleanup: true
      # Dans le cas o√π vous voudriez d√©ployer le programme sur pypi
      provider: pypi
      # Quelle distribution vous voudriez d√©ployer
      distributions: sdist bdist_wheel
      # Quand voulez vous d√©ployer?
      on:
        # Dans ce cas je veux d√©ployer seulement quand un tag est pr√©sent...
        tags: true
        # ... et quand le tag est sur le master et respecte la forme "v0.0.0"
        branch:
          - master
          - /v?(\d+\.)?(\d+\.)?(\*|\d+)$/
      # Votre nom d'utilisateur pypi
      user: 73VW
      # Votre mot de passe Pypi s√©curis√© par Travis si vous avez install√© Travis CLI
      password:
        secure: cGJz+vETnxwWAZQvzveJKOyn3rWy3/tcVmJvTVuflrgKgwMRm+sfQZB3vo39LzDcDbMzlzxLO4SUsqDpCxlPPM1pCjqHeUkke76pXA3HGTqfSS5VBic979pBDBqzFe8SLxery0ND7uPAam2xtZQcMRjIzMZFS+ZBD3tD9pWFnFqQOaw6Mwnfj2dWuA7BeNEBEeG+EErAJTqWHlwodjLsDBBilrvYEMPha049JWSz9TE1SMUKWZszCpo2hda8edvcB7WrNWJCYO+Pmc56aUHGlqiyRUowec9ZQplhmD7HWriRvda4n+1WqUB8tdACqBSBo6t39dis/yiLDv/qZpi6cooxJBtlK184AZvCIfjiu8ua5JqJ/SBghzrwLf7b5VbWg/WOtS8NEB+TYhZhpmkYLPXnOoJLYbbrOYA/sz/QfwXke2NCTp7apZFAtU1lFN2gVWsmff7ysRWwwHW/iidCAcu9BXlwMt2x2dv5PqSSqN1QdwCQ+cGcewlIPInHwCpXwI4sJXPEHeax0J5c206Yf4PMkzgrUj1+UmpB2AKJkMF0+kGd+MOj9SXYbNE1Lc456CuvKUflVry12mVQCgqqL6lZQadQ+aNKy0LoK4o4CN6JTUMpIn6JIOapLc9hzOGZgVuFzZ5YAs6l8VraMzZuAzOEv79UB92B3Iq2Vxki8vo=
      # Utilis√© √ßa si vous n'avez pas Travis CLI
      password : ${PYPI_PASSWORD}

`Mot de passe`
----------

Si vous n'avez pas install√© `Travis CLI`_, utilis√© la seconde option mentionn√©e en haut et faites ce qui suit :

- Sur votre page de profil, trouvez votre projet et cliquez sur la roue dent√©e ‚öôÔ∏è. Cela va vous emmener vers les r√©glages.
- Allez vers la section :code:`Environment Variables` et ajoutez une nouvelle variable.
- Si vous prenez mon exemple, son nom devra √™tre PYPI_PASSWORD et sa valeur devra √™tre votre mot de passe.

.. image:: ./docs/_static/Add_pypi_password.PNG
    :width: 100%
    :alt: Comment ajouter votre mot de passe √† Travis

Si vous avez `Travis CLI`_, la section suivante est pour vous.

- Laissez un vide dans la section mot de passe comme ce qui suit:

.. code:: yaml

    user: 73VW
    # Votre mot de passe Pypi
    password:

- Maintenant allons l'encrypter! Lancez simplement :code:`travis encrypt --add deploy.passwor`, Travis vous demandera votre mot de passe, l'encryptera et le mettra dans le fichier.

üéâ Vous √™tes maintenant fin pr√™t! üéâ

`‚úîÔ∏èAlors qu'est-ce qu'on fait maintenant?!`
******************************************

Eh bien, essayons de mettre quelque chose sur le d√©p√¥t pour voir si tout marche correctement et si les tests se font!

Allez sur la `Page d'accueil`_ et regardez si tout fonctionne bien!

Comme vous pouvez le remarquer, nous n'avons pas mis de tag dans GitHub donc √ßa ne devrait pas √™tre d√©ploy√©.

Travis vous le dira aussi:

:code:`Skipping a deployment with the pypi provider because this is not a tagged commit`

`‚úîÔ∏èMettons un tag dessus!`
**************************

Maintenant, cr√©ons un tag. C'est vraiment simple avec git. La documentation pour √ßa peut se trouver `here <https://git-scm.com/book/en/v2/Git-Basics-Tagging>`_.

Notez que avec :code:`git tag` l'option :code:`-a` vous autorise √† sp√©cifier une version et :code:`-m` le message.

Donc votre commande ressemblera √† ce qui suit:

:code:`git tag -a 0.0.1 -m "First pypi deployment"`

Maintenant vous pouvez v√©rifier si ce que vous avez cr√©ez fonctionne en lan√ßant :code:`git tag`.
Le r√©sultat devrait ressembler √† √ßa:

.. code:: bash

    $ git tag
    v0.0.1

Maintenant envoyez le de nouveau et regardez Travis et pypi, votre paquet devrait √™tre d√©ploy√©!

PS: N'oubliez pas d'ajouter :code:`--tags` √† votre commande de push ou √ßa va rester dans votre d√©p√¥t local.

**‚úîÔ∏èD√©ploy√©!**

`‚ö†Ô∏èNotes globales`
*****************

‚úîÔ∏è Votre projet doit √™tre public pour pouvoir utiliser Travis. Sinon vous devrez acheter Travis pro.

‚úîÔ∏è Votre adresse email devra √™tre v√©rifi√© sur pypi pour pouvoir envoyer votre nouveau projet. Sinon il sera rejet√©.

‚úîÔ∏è Votre version **DOIT** √™tre de la forme [DIGIT.DIGIT.DIGIT]. Regardez sur https://docs.openstack.org/pbr/3.1.0/semver.html pour plus d'informations.

.. Bibliographie:

.. _PBR: https://docs.openstack.org/pbr/latest/index.html

.. _`python setup`: ./setup.py
.. _`config setup`: ./setup.cfg
.. _`Page d'accueil`: https://travis-ci.org
.. _`Travis CLI`: https://github.com/travis-ci/travis.rb
